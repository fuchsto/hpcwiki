---
title: Session 10 (01-18): OpenMP: Performance evaluation, Tasks, Scalability
format: Markdown
categories: lab
...

**[&gt;&gt; Files from this session](/lab/session-10/)**



# References

- [*Prefix Sums and Their Applications*. Blelloch. 1993](https://www.cs.cmu.edu/~guyb/papers/Ble93.pdf)
- [*Reevaluating Amdahl's Law*. Gustafson. 1988](http://mnm-team.org/teaching/Vorlesungen/2017ws/parallel/protect/Uebung/gustafson-88.pdf)
- [*A Simple Capacity Model of Massively Parallel Transaction Systems*. Gunther. 1993](http://mnm-team.org/teaching/Vorlesungen/2017ws/parallel/protect/Uebung/gunther-93.pdf)

- [EZTrace](http://eztrace.gforge.inria.fr/)

- [OpenMP Tasking Lecture Slides](http://mnm-team.org/teaching/Vorlesungen/2017ws/parallel/protect/Vorlesung/10b.OpenMP.Tasking.pdf)
- [OpenMP Task-parallel Sum (wikibooks)](https://en.wikibooks.org/wiki/OpenMP/Tasks)

- [EPCC OpenMP Performance Training Summary](https://www.archer.ac.uk/training/course-material/2016/08/160802_AdvOpenMP_Bristol/L08-Performance.pdf)

- [Article on NUMA effects published in ACM Queue](https://queue.acm.org/detail.cfm?id=2513149)
- [Article on false sharing by Sutter himself](http://www.drdobbs.com/parallel/eliminate-false-sharing/217500206) on Dr. Dobbs


# Measuring Performance


## Runtime (Time to Completion)

### Weak Scaling

### Strong Scaling


## Profiling

Recording accumulated program states



## Tracing

Recording parallel interaction timelines, we are using eztrace for now (it's lightweight, portable, reasonably powerful and free. As in: not pretty. Always remember: it's free.)

**First, prepare your environment*:

Install the eztrace-build for SuperMUC in your SuperMUC home directory:

```bash
$ mkdir ${HOME}/opt
$ cp eztrace-supermuc-homeinst.tar.gz ${HOME}/opt
$ (cd $HOME/opt && tar -xf eztrace-supermuc-homeinst.tar.gz)
```

Then, once **in every new terminal session**:

```bash
$ source ${HOME}/opt/eztrace/env.sh
```


**Compile with eztrace instrumentation**:

(Already defined in Makefile)

```bash
$ eztrace_cc $CC <as usual> -fopenmp -lm
```

**Run and trace application**:

```bash
$ eztrace -t omp ./my_openmp_application
```

**Postmortem analysis**:

Profiling stats:

```bash
$ eztrace_stats myusername_eztrace_log_rank_1
```

Visualize trace:

```bash
$ eztrace_convert myusername_eztrace_log_rank_1
$ vite eztrace_output.trace
```





# Making Sense of Measurements

- False sharing?
- First touch?






